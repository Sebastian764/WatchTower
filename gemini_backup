import google.generativeai as genai
import time
import os

# Import the API key from the config file
from config import GEMINI_API_KEY

# Configure the Gemini API
try:
    if not GEMINI_API_KEY or "AIza" not in GEMINI_API_KEY:
        raise ValueError("Gemini API Key is missing or invalid. Please add it to your config.py file.")
    
    genai.configure(api_key=GEMINI_API_KEY)
    print("✅ Successfully configured Gemini AI using API Key.")
    
except Exception as e:
    print(f"✗ ERROR: Could not configure Gemini AI. Details: {e}")

def analyze_video_clip(video_path):
    """
    Original function for analyzing video clips.
    Kept for backwards compatibility.
    """
    print(f"Uploading file to Gemini: {video_path}...")
    try:
        video_file = genai.upload_file(path=video_path)

        # Poll the API to wait until the video is processed and ready
        while video_file.state.name == "PROCESSING":
            print("Waiting for video to be processed...")
            time.sleep(2)
            video_file = genai.get_file(video_file.name)

        if video_file.state.name == "FAILED":
            print(f"✗ ERROR: Video processing failed for {video_path}")
            return f"Video processing failed. State: {video_file.state.name}"

        print(f"✅ File uploaded and processed successfully: {video_file.name}")

        prompt = (
            "You are a highly vigilant security AI system. Your primary task is to identify and describe acts of physical violence, aggression, assault, or fighting in this video clip. "
            "Pay close attention to sudden, fast movements, people pushing, shoving, punching, kicking, or anyone falling to the ground unexpectedly. "
            "Describe the specific actions observed. "
            "If a physical altercation is detected, begin your response with 'ALERT: Physical altercation detected.' followed by a description. "
            "If the scene appears calm and normal, simply state 'Scene appears normal.' "
        )

        model = genai.GenerativeModel(model_name="models/gemini-1.5-flash-latest")
        print("Generating content with Gemini model...")
        response = model.generate_content([prompt, video_file])

        # Clean up by deleting the file from Google's servers
        print(f"Deleting uploaded file: {video_file.name}")
        genai.delete_file(video_file.name)

        return response.text

    except Exception as e:
        print(f"✗ An error occurred during Gemini analysis: {e}")
        return f"An error occurred while analyzing the video: {e}"

def analyze_full_video_with_timestamps(video_path, duration):
    """
    Analyzes the full video and returns timestamps of violent incidents.
    """
    print(f"\n{'='*60}")
    print(f"GEMINI API ANALYSIS")
    print(f"Video: {video_path}")
    print(f"Duration: {duration:.2f} seconds")
    print(f"{'='*60}\n")
    
    try:
        # Check if file exists
        if not os.path.exists(video_path):
            print(f"ERROR: Video file not found at {video_path}")
            return "No incidents detected"
        
        # Check file size
        file_size = os.path.getsize(video_path) / (1024 * 1024)  # Size in MB
        print(f"File size: {file_size:.2f} MB")
        
        if file_size > 200:  # Gemini has file size limits
            print(f"WARNING: File size {file_size:.2f} MB may be too large for Gemini API")
        
        # Upload the full video
        print("Uploading video to Gemini API...")
        video_file = genai.upload_file(path=video_path)
        print(f"Upload initiated. File name: {video_file.name}")
        
        # Wait for processing with timeout
        max_wait_time = 120  # Maximum wait time in seconds (2 minutes)
        wait_interval = 3
        total_waited = 0
        
        while video_file.state.name == "PROCESSING" and total_waited < max_wait_time:
            print(f"Processing video... ({total_waited}s / {max_wait_time}s)")
            time.sleep(wait_interval)
            total_waited += wait_interval
            video_file = genai.get_file(video_file.name)
        
        if video_file.state.name == "FAILED":
            print(f"✗ ERROR: Video processing failed. State: {video_file.state.name}")
            return "No incidents detected - processing failed"
        
        if total_waited >= max_wait_time:
            print(f"✗ ERROR: Timeout waiting for video processing")
            try:
                genai.delete_file(video_file.name)
            except:
                pass
            return "No incidents detected - processing timeout"
        
        print(f"✅ Video processed successfully in {total_waited} seconds")
        
        # Create a detailed prompt for timestamp extraction
        duration_min = int(duration // 60)
        duration_sec = int(duration % 60)
        
        prompt = f"""You are an advanced AI security surveillance system analyzing a video that is {duration_min} minutes and {duration_sec} seconds long.

CRITICAL TASK: Detect ANY physical violence or aggressive behavior in this video.

Carefully analyze the ENTIRE video for:
- Physical fights or altercations
- Punching, kicking, hitting, slapping
- Pushing, shoving, or grabbing
- People falling or being knocked down
- Aggressive confrontations
- Threatening gestures or movements
- Any form of physical assault

IMPORTANT: Provide EXACT timestamps for any incidents found.

FORMAT YOUR RESPONSE EXACTLY LIKE THIS:

If violence IS detected:
"0:15-0:22: Two people fighting, one person pushes the other
0:45-0:50: Person throws a punch at another individual
1:30-1:35: Aggressive shoving between multiple people"

If NO violence is detected:
"No violent incidents detected in this video."

BE SPECIFIC: 
- Use MM:SS format for timestamps (e.g., 0:45 for 45 seconds, 1:30 for 1 minute 30 seconds)
- Each incident should be on a new line
- Start with the timestamp range, then describe what happened
- Be thorough - even minor aggressive actions should be reported"""

        # Generate analysis
        print("Analyzing video for security threats...")
        model = genai.GenerativeModel(model_name="models/gemini-1.5-flash-latest")
        
        try:
            response = model.generate_content([prompt, video_file])
            analysis_text = response.text
            print(f"✅ Analysis complete")
        except Exception as e:
            print(f"✗ ERROR during content generation: {e}")
            analysis_text = "No incidents detected - analysis error"
        
        # Clean up - delete the uploaded file
        try:
            print("Cleaning up uploaded file...")
            genai.delete_file(video_file.name)
            print("✅ Cleanup complete")
        except Exception as e:
            print(f"WARNING: Could not delete uploaded file: {e}")
        
        return analysis_text
        
    except Exception as e:
        print(f"✗ ERROR in analyze_full_video_with_timestamps: {str(e)}")
        import traceback
        traceback.print_exc()
        return "No incidents detected - error occurred"

def test_gemini_connection():
    """
    Test function to verify Gemini API connection.
    """
    try:
        print("Testing Gemini API connection...")
        model = genai.GenerativeModel(model_name="models/gemini-1.5-flash-latest")
        response = model.generate_content("Say 'API Connected' if you can read this.")
        print(f"✅ Gemini API Test Success: {response.text}")
        return True
    except Exception as e:
        print(f"✗ Gemini API Test Failed: {e}")
        return False